# -*- coding: utf-8 -*-
"""Customer Clustering using K-Means.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q2Gx7gVnw0oNUBGH5q3w2Chgk2c1E3R_
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd ..
from google.colab import drive
drive.mount('/content/gdrive')

# rename path
!ln -s /content/gdrive/My\ Drive/ /mydrive
#!ls /mydrive

!ls /mydrive/Data_Science_Projects/Customer_Clustering/data

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

path = '/mydrive/Data_Science_Projects/Customer_Clustering/data/'

df = pd.read_csv(path + 'segmentation_data.csv')
df.head(10)

df.shape

df.describe()

"""## Separate & zipping dataset"""

Age = df['Age'].values
Savings = df['Income'].values
X = np.array(list(zip(Age, Savings)))
X

plt.scatter(Age, Savings)

from sklearn.cluster import KMeans
wcss = []
for i in range(1, 11):
  km = KMeans(n_clusters=i, random_state=10)
  km.fit(X)
  wcss.append(km.inertia_)

plt.plot(range(1,11), wcss, color='red', marker="8")
plt.xlabel("Number of clusters")
plt.ylabel("WCSS")
plt.show()

"""## To apply the K-means  with k=4



"""

model = KMeans(n_clusters=4, random_state=10)
Y_means = model.fit_predict(X)

"""## Vizalizing the cluster

- Cluster 1:  Customers with medium income and low spend
- Cluster 2:  Customers with high income and midum to high spend
- Cluster 3:  Customers with low income
- Cluster 4:  Customers with medium income and high spend
"""

plt.scatter(X[Y_means== 0,0], X[Y_means==0,1], s=60, c='brown', label="Cluster 1")
plt.scatter(X[Y_means== 1,0], X[Y_means==1,1], s=60, c='blue', label="Cluster 2")
plt.scatter(X[Y_means== 2,0], X[Y_means==2,1], s=60, c='green', label="Cluster 3")
plt.scatter(X[Y_means== 3,0], X[Y_means==3,1], s=60, c='cyan', label="Cluster 4")
plt.scatter(model.cluster_centers_[:, 0], model.cluster_centers_[:, 1], s=100, marker='s', c='red', label="Centroids")
plt.title("Customer Spent Income Analysis")
plt.xlabel("Income")
plt.ylabel("Spent")
plt.legend()
plt.show()

